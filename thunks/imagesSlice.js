import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import {getFlickrImages} from './imagesAPI';

const initialState = {
  status: 'idle',
  photos: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getImages = createAsyncThunk(
  'images/getFlickrImages',
  async ({searchTag, pageNumber}) => {
    const response = await getFlickrImages(searchTag, pageNumber);
    // The value we return becomes the `fulfilled` action payload
    return response.photo;
  },
);

export const imagesSlice = createSlice({
  name: 'images',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetFlickrImages: state => {
      state.photos = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(getImages.pending, state => {
        state.status = 'loading';
      })
      .addCase(getImages.fulfilled, (state, action) => {
        state.status = 'idle';
        state.photos = action.payload;
      });
  },
});
export const {resetFlickrImages} = imagesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
export const selectPhotos = state => state.images.photos;
export const selectStatusIndicator = state => state.images.status;

export default imagesSlice.reducer;
